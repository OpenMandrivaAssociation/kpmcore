From 09711cdf1de6855ab3b913e649a5d78d8a53f767 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andrius=20=C5=A0tikonas?= <andrius@stikonas.eu>
Date: Wed, 1 Jun 2016 21:00:31 +0100
Subject: [PATCH 3/9] Whitespace fixes.

---
 src/core/devicescanner.cpp  |  2 +-
 src/core/partition.cpp      | 16 ++++++++--------
 src/core/partitiontable.cpp | 28 ++++++++++++++--------------
 src/fs/lvm2_pv.h            |  2 +-
 src/gui/partwidgetbase.cpp  |  4 ++--
 src/ops/operation.cpp       |  6 +++---
 src/util/report.cpp         |  4 ++--
 7 files changed, 31 insertions(+), 31 deletions(-)

diff --git a/src/core/devicescanner.cpp b/src/core/devicescanner.cpp
index e319aad..e835db5 100644
--- a/src/core/devicescanner.cpp
+++ b/src/core/devicescanner.cpp
@@ -59,7 +59,7 @@ void DeviceScanner::scan()
     QList<Device*> deviceList = CoreBackendManager::self()->backend()->scanDevices();
 
     foreach(Device * d, deviceList)
-    operationStack().addDevice(d);
+        operationStack().addDevice(d);
 
     operationStack().sortDevices();
 }
diff --git a/src/core/partition.cpp b/src/core/partition.cpp
index a3e4532..92ced34 100644
--- a/src/core/partition.cpp
+++ b/src/core/partition.cpp
@@ -180,8 +180,8 @@ qint64 Partition::sectorsUsed() const
 
     qint64 result = 0;
     foreach(const Partition * p, children())
-    if (!p->roles().has(PartitionRole::Unallocated))
-        result += p->length();
+        if (!p->roles().has(PartitionRole::Unallocated))
+            result += p->length();
 
     return result;
 }
@@ -231,8 +231,8 @@ qint64 Partition::maxFirstSector() const
     qint64 rval = -1;
 
     foreach(const Partition * child, children())
-    if (!child->roles().has(PartitionRole::Unallocated) && (child->firstSector() < rval || rval == -1))
-        rval = child->firstSector();
+        if (!child->roles().has(PartitionRole::Unallocated) && (child->firstSector() < rval || rval == -1))
+            rval = child->firstSector();
 
     return rval;
 }
@@ -243,8 +243,8 @@ qint64 Partition::minLastSector() const
     qint64 rval = -1;
 
     foreach(const Partition * child, children())
-    if (!child->roles().has(PartitionRole::Unallocated) && child->lastSector() > rval)
-        rval = child->lastSector();
+        if (!child->roles().has(PartitionRole::Unallocated) && child->lastSector() > rval)
+            rval = child->lastSector();
 
     return rval;
 }
@@ -253,8 +253,8 @@ qint64 Partition::minLastSector() const
 bool Partition::hasChildren() const
 {
     foreach(const Partition * child, children())
-    if (!child->roles().has(PartitionRole::Unallocated))
-        return true;
+        if (!child->roles().has(PartitionRole::Unallocated))
+            return true;
 
     return false;
 }
diff --git a/src/core/partitiontable.cpp b/src/core/partitiontable.cpp
index 2c6d3eb..542ec8a 100644
--- a/src/core/partitiontable.cpp
+++ b/src/core/partitiontable.cpp
@@ -130,8 +130,8 @@ int PartitionTable::numPrimaries() const
     int result = 0;
 
     foreach(const Partition * p, children())
-    if (p->roles().has(PartitionRole::Primary) || p->roles().has(PartitionRole::Extended))
-        result++;
+        if (p->roles().has(PartitionRole::Primary) || p->roles().has(PartitionRole::Extended))
+            result++;
 
     return result;
 }
@@ -463,10 +463,10 @@ bool PartitionTable::isSectorBased(const Device& d) const
         // see if we have more cylinder aligned partitions than sector
         // aligned ones.
         foreach(const Partition * p, children())
-        if (p->firstSector() % PartitionAlignment::sectorAlignment(d) == 0)
-            numSectorAligned++;
-        else if (p->firstSector() % d.cylinderSize() == 0)
-            numCylinderAligned++;
+            if (p->firstSector() % PartitionAlignment::sectorAlignment(d) == 0)
+                numSectorAligned++;
+            else if (p->firstSector() % d.cylinderSize() == 0)
+                numCylinderAligned++;
 
         return numSectorAligned >= numCylinderAligned;
     }
@@ -498,19 +498,19 @@ QTextStream& operator<<(QTextStream& stream, const PartitionTable& ptable)
     QList<const Partition*> partitions;
 
     foreach(const Partition * p, ptable.children())
-    if (!p->roles().has(PartitionRole::Unallocated)) {
-        partitions.append(p);
+        if (!p->roles().has(PartitionRole::Unallocated)) {
+            partitions.append(p);
 
-        if (p->roles().has(PartitionRole::Extended))
-            foreach(const Partition * child, p->children())
-            if (!child->roles().has(PartitionRole::Unallocated))
-                partitions.append(child);
-    }
+            if (p->roles().has(PartitionRole::Extended))
+                foreach(const Partition * child, p->children())
+                if (!child->roles().has(PartitionRole::Unallocated))
+                    partitions.append(child);
+        }
 
     qSort(partitions.begin(), partitions.end(), isPartitionLessThan);
 
     foreach(const Partition * p, partitions)
-    stream << *p;
+        stream << *p;
 
     return stream;
 }
diff --git a/src/fs/lvm2_pv.h b/src/fs/lvm2_pv.h
index f367ace..6e38a76 100644
--- a/src/fs/lvm2_pv.h
+++ b/src/fs/lvm2_pv.h
@@ -1,6 +1,6 @@
 /*************************************************************************
  *  Copyright (C) 2012 by Volker Lanz <vl@fidra.de>                      *
- *  Copyright (C) 2016 by Andrius Štikonas <andrius@stikonas.eu>         * 
+ *  Copyright (C) 2016 by Andrius Štikonas <andrius@stikonas.eu>         *
  *                                                                       *
  *  This program is free software; you can redistribute it and/or        *
  *  modify it under the terms of the GNU General Public License as       *
diff --git a/src/gui/partwidgetbase.cpp b/src/gui/partwidgetbase.cpp
index 544b047..88ba884 100644
--- a/src/gui/partwidgetbase.cpp
+++ b/src/gui/partwidgetbase.cpp
@@ -147,8 +147,8 @@ QList<PartWidget*> PartWidgetBase::childWidgets()
     QList<PartWidget*> rval;
 
     foreach(QObject * o, children())
-    if (PartWidget* w = qobject_cast<PartWidget*>(o))
-        rval.append(w);
+        if (PartWidget* w = qobject_cast<PartWidget*>(o))
+            rval.append(w);
 
     return rval;
 }
diff --git a/src/ops/operation.cpp b/src/ops/operation.cpp
index b2a0e75..a34c061 100644
--- a/src/ops/operation.cpp
+++ b/src/ops/operation.cpp
@@ -147,7 +147,7 @@ qint32 Operation::totalProgress() const
     qint32 result = 0;
 
     foreach(const Job * job, jobs())
-    result += job->numSteps();
+        result += job->numSteps();
 
     return result;
 }
@@ -163,8 +163,8 @@ bool Operation::execute(Report& parent)
     Report* report = parent.newChild(description());
 
     foreach(Job * job, jobs())
-    if (!(rval = job->run(*report)))
-        break;
+        if (!(rval = job->run(*report)))
+            break;
 
     setStatus(rval ? StatusFinishedSuccess : StatusError);
 
diff --git a/src/util/report.cpp b/src/util/report.cpp
index d2ea45b..5a1b5bc 100644
--- a/src/util/report.cpp
+++ b/src/util/report.cpp
@@ -81,7 +81,7 @@ QString Report::toHtml() const
         s += QStringLiteral("<br/>\n");
     else
         foreach(Report * child, children())
-        s += child->toHtml();
+            s += child->toHtml();
 
     if (!status().isEmpty())
         s += QStringLiteral("<b>") + status().toHtmlEscaped() + QStringLiteral("</b><br/>\n\n");
@@ -110,7 +110,7 @@ QString Report::toText() const
         s += output() + QStringLiteral("\n");
 
     foreach(Report * child, children())
-    s += child->toText();
+        s += child->toText();
 
     return s;
 }
-- 
2.8.3

